/* Application.c generated by valac 0.56.9, the Vala compiler
 * generated from Application.vala, do not modify */

/*
 * SPDX-License-Identifier: GPL-2.0-or-later
 * SPDX-FileCopyrightText: 2023 Your Organization (https://yourwebsite.com)
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_MY_APP (my_app_get_type ())
#define MY_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MY_APP, MyApp))
#define MY_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MY_APP, MyAppClass))
#define IS_MY_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MY_APP))
#define IS_MY_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MY_APP))
#define MY_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MY_APP, MyAppClass))

typedef struct _MyApp MyApp;
typedef struct _MyAppClass MyAppClass;
typedef struct _MyAppPrivate MyAppPrivate;
enum  {
	MY_APP_0_PROPERTY,
	MY_APP_NUM_PROPERTIES
};
static GParamSpec* my_app_properties[MY_APP_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _MyApp {
	GtkApplication parent_instance;
	MyAppPrivate * priv;
};

struct _MyAppClass {
	GtkApplicationClass parent_class;
};

static gpointer my_app_parent_class = NULL;

VALA_EXTERN GType my_app_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyApp, g_object_unref)
VALA_EXTERN MyApp* my_app_new (void);
VALA_EXTERN MyApp* my_app_construct (GType object_type);
static void my_app_real_activate (GApplication* base);
static gint my_app_main (gchar** args,
                  gint args_length1);
static GType my_app_get_type_once (void);

MyApp*
my_app_construct (GType object_type)
{
	MyApp * self = NULL;
#line 8 "../src/Application.vala"
	self = (MyApp*) g_object_new (object_type, "application-id", "io.github.leolost2605.detective", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 7 "../src/Application.vala"
	return self;
#line 73 "Application.c"
}

MyApp*
my_app_new (void)
{
#line 7 "../src/Application.vala"
	return my_app_construct (TYPE_MY_APP);
#line 81 "Application.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 19 "../src/Application.vala"
	return self ? g_object_ref (self) : NULL;
#line 89 "Application.c"
}

static void
my_app_real_activate (GApplication* base)
{
	MyApp * self;
	GtkHeaderBar* headerbar = NULL;
	GtkHeaderBar* _tmp0_ = NULL;
	GtkApplicationWindow* main_window = NULL;
	gchar* _tmp1_;
	GtkWidget* _tmp2_;
	GtkApplicationWindow* _tmp3_ = NULL;
#line 14 "../src/Application.vala"
	self = (MyApp*) base;
#line 15 "../src/Application.vala"
	_tmp0_ = (GtkHeaderBar*) gtk_header_bar_new ();
#line 15 "../src/Application.vala"
	gtk_header_bar_set_show_title_buttons (_tmp0_, TRUE);
#line 15 "../src/Application.vala"
	g_object_ref_sink (_tmp0_);
#line 15 "../src/Application.vala"
	headerbar = _tmp0_;
#line 19 "../src/Application.vala"
	_tmp1_ = g_strdup ("Detective");
#line 19 "../src/Application.vala"
	_tmp2_ = _g_object_ref0 ((GtkWidget*) headerbar);
#line 19 "../src/Application.vala"
	_tmp3_ = (GtkApplicationWindow*) gtk_application_window_new ((GtkApplication*) self);
#line 19 "../src/Application.vala"
	g_object_set ((GtkWindow*) _tmp3_, "default-height", 300, NULL);
#line 19 "../src/Application.vala"
	g_object_set ((GtkWindow*) _tmp3_, "default-width", 300, NULL);
#line 19 "../src/Application.vala"
	gtk_window_set_title ((GtkWindow*) _tmp3_, _tmp1_);
#line 19 "../src/Application.vala"
	_g_free0 (_tmp1_);
#line 19 "../src/Application.vala"
	gtk_window_set_titlebar ((GtkWindow*) _tmp3_, _tmp2_);
#line 19 "../src/Application.vala"
	_g_object_unref0 (_tmp2_);
#line 19 "../src/Application.vala"
	g_object_ref_sink (_tmp3_);
#line 19 "../src/Application.vala"
	main_window = _tmp3_;
#line 25 "../src/Application.vala"
	gtk_window_present ((GtkWindow*) main_window);
#line 14 "../src/Application.vala"
	_g_object_unref0 (main_window);
#line 14 "../src/Application.vala"
	_g_object_unref0 (headerbar);
#line 140 "Application.c"
}

static gint
my_app_main (gchar** args,
             gint args_length1)
{
	MyApp* _tmp0_;
	MyApp* _tmp1_;
	gint _tmp2_;
	gint result;
#line 29 "../src/Application.vala"
	_tmp0_ = my_app_new ();
#line 29 "../src/Application.vala"
	_tmp1_ = _tmp0_;
#line 29 "../src/Application.vala"
	_tmp2_ = g_application_run ((GApplication*) _tmp1_, (gint) args_length1, args);
#line 29 "../src/Application.vala"
	_g_object_unref0 (_tmp1_);
#line 29 "../src/Application.vala"
	result = _tmp2_;
#line 29 "../src/Application.vala"
	return result;
#line 163 "Application.c"
}

int
main (int argc,
      char ** argv)
{
#line 28 "../src/Application.vala"
	return my_app_main (argv, argc);
#line 172 "Application.c"
}

static void
my_app_class_init (MyAppClass * klass,
                   gpointer klass_data)
{
#line 6 "../src/Application.vala"
	my_app_parent_class = g_type_class_peek_parent (klass);
#line 6 "../src/Application.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication*)) my_app_real_activate;
#line 183 "Application.c"
}

static void
my_app_instance_init (MyApp * self,
                      gpointer klass)
{
}

static GType
my_app_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MyAppClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) my_app_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MyApp), 0, (GInstanceInitFunc) my_app_instance_init, NULL };
	GType my_app_type_id;
	my_app_type_id = g_type_register_static (gtk_application_get_type (), "MyApp", &g_define_type_info, 0);
	return my_app_type_id;
}

GType
my_app_get_type (void)
{
	static volatile gsize my_app_type_id__once = 0;
	if (g_once_init_enter (&my_app_type_id__once)) {
		GType my_app_type_id;
		my_app_type_id = my_app_get_type_once ();
		g_once_init_leave (&my_app_type_id__once, my_app_type_id);
	}
	return my_app_type_id__once;
}

